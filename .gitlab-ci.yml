# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - train
  - test
  - push-image
  - deploy

variables:
  IMG_NAME: loan_default_pred_img
  IMG_TAG: latest
  CONT_NAME: myapp


train-job:       # This job runs in the build stage, which runs first.
  stage: train
  tags:
    - self-hosted
  script:
    - cd loan_defaulter_pred
    - pip install -r requirements/requirements.txt
    - python train_model.py
    - echo "Model training complete."
  artifacts:
    paths:
      - loan_defaulter_pred/trained_model/*.pkl
    expire_in: 24 hour


pytest-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - self-hosted
  needs:
    - train-job
  script:
    - echo "Running test job.."
    - cd loan_defaulter_pred
    - pip install -r requirements/test_requirements.txt
    - pytest


push-image-job:   # This job also runs in the test stage.
  stage: push-image    # It can run at the same time as unit-test-job (in parallel).
  tags:
    - self-hosted
  needs:
    - train-job
    - pytest-job
  script:
    - echo "Login to DockerHub.."
    - docker login -u $DOCKER_USER_NAME -p $DOCKER_PASS_TOKEN

    - echo "Build the docker image"
    - docker build -t $DOCKER_USER_NAME/$IMG_NAME:$IMG_TAG loan_defaulter_pred/. -f loan_defaulter_pred/Dockerfile

    - echo "Push the docker image"
    - docker push $DOCKER_USER_NAME/$IMG_NAME:$IMG_TAG


deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - self-hosted
  environment: production
  needs:
    - push-image-job
  script:
    - echo "Deploying application..."

    - echo "Pull docker image"
    - docker pull $DOCKER_USER_NAME/$IMG_NAME:$IMG_TAG

    - echo "Delete the old container"
    - docker rm -f $CONT_NAME || true

    - echo "Run the Docker container"
    - docker run -d -it -p 8080:8080 --name=$CONT_NAME $DOCKER_USER_NAME/$IMG_NAME:$IMG_TAG

    - echo "Application successfully deployed."

